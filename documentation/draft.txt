Abstract:
Wir schlagen eine Erweiterung für die Programmiersprache IML vor, mit der auf einfache
Weise neue Infix-Operatoren definiert werden können. Wir zeigen auf mit welchen Änderungen
am Lexer, Parser und der Grammatik eine solche Erweiterung implementiert werden kann.

Idee:
Wir erweitern IML um eine Möglichkeit benutzerdefinierte Operatoren hinzuzufügen. Neue Operatoren
müssen im Deklarationsteil des IML-Programms angegeben werden (zB "infix ** 3", wobei 3 für die gewählte Präzedenz steht), und werden anschliessend in einer Funktion namens "operator**" definiert, 
Anschliessend kann der neue Operator wie jeder andere Infix-Operator verwendet werden, zum Beispiel:
 b := base_number ** fib(2)

Kontext- und Typeinschränkungen:
Das Verwenden der neuen Operatoren ist nur erlaubt nachdem sie bereits vorher im Programm definiert worden sind. Bei den unterstützten Typen beschränken wir uns auf int32 (TODO: wir werden wohl sowieso nur das reduzierte IML implementieren)

Vergleich mit anderen Programmiersprachen:
Uns ist keine andere Programmiersprache bekannt in der komplett neue Operatoren definiert werden können. C++ bietet eine Möglichkeit an, bestehende Operatoren für neue Objekte zu definieren ("overload"). Wir haben die gleiche Namensgebung für die implementierende Funktion unserer neuen Operatoren wie für Overloads in C++ gewählt ("operator**"). Dies mit der Absicht dass C++-Programmierer schon möglichst vertraut mit der Syntax sind.

Lexikalische Syntax:
Erweiterung von "⟨ident⟩" um "⟨special⟩"-Charaktere zu erlauben: 
⟨ident⟩ ::= (⟨letter⟩(⟨letter⟩ | ⟨digit⟩ | ⟨special⟩ | ‘_’ | ‘’’)∗)⟨reservedid⟩

Ausserdem wird "⟨symbol⟩" um die neu definierten Operatoren erweitert. Um dies zu erreichen muss das Programm eventuell in zwei Phasen gelext und geparst werden.

Grammatikalische Syntax:
Um neue Operatoren und ihre Präzedenz zu definieren erweitern wir die Grammatik wie folgt:

Definition eines neuen Operators "⟨ident⟩" mit Präzedenz "⟨literal⟩":
⟨decl⟩ ::= ⟨stoDecl⟩
       | ⟨funDecl ⟩
       | ⟨procDecl ⟩
       | ⟨operDecl ⟩

⟨operDecl⟩ ::= infix {⟨special⟩} ⟨literal⟩   

Ausserdem wird, je nach Präzedenz, einer der Grammatikregeln ⟨relopr⟩, ⟨addopr⟩ oder ⟨multopr⟩ mit dem neuen Operator ergänzt.

Entwurfsalternativen:
In unserer ersten Spezifikation wollten wir die Deklaration zuerst im Stile von C und C++ mit Kompilerpragmas in Form von Kommentaren implementieren. Nach Rückmeldung haben wir uns entschlossen dass eine Deklaration im "global"-Block sauberer ist. 
Auch die Idee, den Operator in der Deklaration in Hexadezimal zu schreiben haben wir uns aus Gründen der Lesbarkeit verworfen.

Anhang: IML Testprogramm
program CustomOperator()
global
  infix ** 3
  fun operator**(a:int32, b:int32) returns result:int32
  local
    var i:int32
  do
   i init := 0;
   result init := 1;
   while i < b do
    result := result * a;  
    i := i + 1
   endwhile
  endfun
do
  debugout 2 ** 8
endprogram



===========================================================

• Abstract
• Idee der Erweiterung mit konkreten Beispielen
• lexikalische Syntax
• grammatikalische Syntax
• überprüft von Fix&Foxi
• Kontext- und Typeinschränkungen
• Codeerzeugung
  – erst im Schlussbericht
• Vergleich mit anderen Programmiersprachen
• Entwurfsalternativen
• Anhang: IML Testprogramme
  – zum Test aller relevanten Eigenschaften der Erweiterung, insbesondere der Kontext- und Typeinschränkungen
  – keine Einschränkung der Länge dieses Anhangs
• das Gewicht auf den einzelnen Punkten hängt stark vom gewählten Thema ab
• Schwerpunkt der Berichte ist die gewählte Erweiterung und ihre Einbindung in IML, nicht IML selbst